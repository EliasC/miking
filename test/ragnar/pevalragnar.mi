// Miking is licensed under the MIT license.
// Copyright (C) David Broman. See file LICENSE.txt
//


language Ragnar

//Test a recursive function where we specify the return type
def pow(n:Int,x:Int) -> Int {
    if(n == 1) x else x*pow(n-1,x)
}
def pow3 = peval pow(3)
utest 64 pow3(4)


//Power with left overs
def pow(n:Int,x:Int) -> Int {
    if(n < 1) 1 else x*pow(n-1,x)
}
def pow4 = peval pow(4)
utest 16 pow4(2)


//Different optimizations of application constants
def f = peval (fun(x){0 * x})
utest 0  f(10)
def f = peval (fun(x){1 * x})
utest 10 f(10)
def f = peval (fun(x){0 + x})
utest 10 f(10)
def f = peval (fun(x){x * 0})
utest 0 f(10)
def f = peval (fun(x){x * 1})
utest 10 f(10)
def f = peval (fun(x){x + 0})
utest 10 f(10)
def f = peval (fun(x){x - 0})
utest 10 f(10)
def f = peval (fun(x){x*2*0*x})
utest 0  f(10)
def f = peval (fun(x){3+x*2*0*x+8})
utest 11 f(10)
