
// Miking is licensed under the MIT license.
// Copyright (C) David Broman. See file LICENSE.txt
//
// File mcore.mi tests all basic MCore language constructs

language MCore


// Literals and normal expressions.
utest 1  (peval 1)
utest 14  (peval (addi 10 (subi 7 3)))

// Partial evaluation, but without giving any optimized effect
let foo = lam x:Int. lam y:Int. (addi x y)
utest 13  ((peval foo) 10 3)
utest 5  ((peval (foo 2)) 3)

// Partial evaluation one lambda. Performs partial eval under lambda
let foo = lam x:Int. lam y:Int. lam z:Int. (muli (addi x y) z)
utest 26  ((peval (foo 10 3)) 2)

// Partial evaluation of two dynamic input variables
let foo = lam x:Int. lam y:Int. lam z:Int. lam k:Int. (muli (muli (addi x y) z) k)
utest 40  ((peval (foo 2 3)) 2 4)


// Partial evalatuon of the power function
let pow = fix (lam pow:(Int->Int->Int). lam n:Int. lam x:Int.
           ifexp (leqi n 1)
              (lam _:a. x)
              (lam _:a. muli x (pow (subi n 1) x))
           )
utest 64 ((peval (pow 3)) 4)


// Power function, but in the wrong order for partial evaluation
let pow = fix (lam pow:(Int->Int->Int). lam x:Int. lam n:Int.
           ifexp (leqi n 1)
              (lam _:a. x)
              (lam _:a. muli x (pow x (subi n 1)))
           )
utest 16 ((peval ((lam n:Int. lam x:Int. pow x n) 2)) 4)


//TODO:
// - add affine lambdas and test optimized power function
