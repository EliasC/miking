lang mcore

let Maybe =
  {
    pub type Maybe :: * -> *
    pub data Nothing : all a. Maybe a
    pub data Just : all a. a -> Maybe a

    pub let isJust = Lam a. lam m: Maybe a.
      match m with
        case Nothing -> false
      | case Just _ -> true

    pub let isNothing = Lam a. lam m: Maybe a.
      not (isJust m)

    pub let map =
      Lam a. Lam b. lam f: a -> b. lam m: Maybe a.
        match m with
          case Nothing -> Nothing
        | case Just x -> Just (f x)
  }

let mkFunctor =
  Lam F :: * -> *.
  lam fmap: all a. all b. (a -> b) -> F a -> F b.
    {pub let fmap = fmap}

let MaybeFunctor = mkFunctor Maybe.map

-- Inheritance between type-classes
let mkApplicative =
  Lam F :: * -> *.
  lam functor: see_comment. -- {fmap: all a. all b. (a -> b) -> F a -> F b}.
  lam pure: all a. a -> F a.
  lam app: all a. all b. F (a -> b) -> F a -> F b.
    compose
      functor
      {pub let pure = pure
       pub let app = app}