

lang MCore


module Lang
  type Expr :: * -> *
  eval : Expr t -> Mxpr t


module Bool from Lang
  data True : Expr bool
  data False : Expr bool
  data And : Expr bool -> Expr bool -> Expr bool
  def eval = lam e:Expr a.
      match e with
      | True -> true
      | False -> false
      | And b1 b2 -> and (eval b1) (eval b2)


module If from Bool
  data If : Expr bool -> Expr a -> Expr a -> Expr a
  def eval = lam e:Expr a.
     match e with
     | If g t f ->
        (match eval g with
         | true -> eval t
         | false -> eval f)


module Lam from Lang
  data App : Expr (a->b) -> Expr a -> Expr b
  data Lam :