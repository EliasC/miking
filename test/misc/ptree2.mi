
lang mcore

-- New key idea: do not mention the parameters of constructors or
-- the return type in the type data types
-- Compare this to polymorphic variant.

-- Define a data type
type Tree :: * -> * = Lam X::*. {Node X, Leaf X}

-- Define two data constructors
data Node : all A. Tree A -> Tree A -> Tree A
data Leaf : all A. A -> Tree A

-- Can also be written without the Tree type given explicitly
data Node : all A. {Node A, Leaf A} -> {Node A, Leaf A} -> {Node A, Leaf A}
data Leaf : all A. A -> {Node A, Leaf A}

-- Create a term of data type Tree
-- Switch to def instead of let, to not assume a specific order
def t1 = Node (Node (Leaf 1) (Leaf2)) (Leaf 3)

-- A simple recursive function
def countLeafs = Lam A. lam t:Tree A.
  match t with
    case Node n1 n2 -> addi (countLeafs n1) (countLeafs n2)
  | case Leaf _     -> 1
