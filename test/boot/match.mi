// Miking is licensed under the MIT license.
// Copyright (C) David Broman. See file LICENSE.txt
//
// Test differnt ways of using the match construct

language Ragnar

//Simple string matching with function
def foo1(str:String) = match str {
    [x]++x2 => x
    [] => 'y'
}
utest foo1("foo")       'f'
utest foo1("k")         'k'
utest foo1("")          'y'


//Match strings
utest match "tests" {['t',a,'s']++b => a, _ => '.'}           'e'
utest match "tests" {['t',a,'s']++b => b, _ => '.'}           "ts"
utest match "tests" {['t',a,'k']++b => b, _ => '.'}           '.'
utest match "tests" {"t"++[a]++"s"++b => a, _ => '.'}         'e'


utest match "te" ++ "sts" {['t',a,'s']++b => a, _ => '.'}     'e'
utest match "te" ++ "sts" {['t',a,'s']++b => b, _ => '.'}     "ts"


//Test recursive map function
def map(f:a->b, lst:[a]) -> [b] = match lst {
    [x]++xs => [f(x)] ++ map(f,xs)
    [] => []
}
utest map(fun(x)x+1,[1,2,3,4])                     [2,3,4,5]
utest map(fun(x)x+1,[1]++[2]++[3,4])               [2,3,4,5]
utest map(fun(x){x++"x"},["1","2"]++["3","4"])     ["1x","2x","3x","4x"]



//test integer match
utest match 3{2=>"2", 3=>"3"}                 "3"
utest match 2{2=>"2"}                         "2"
utest match 2+2{2=>"2", 3=>"3", 4=>"4"}       "4"
utest match 2+2{2=>"2"  3=>"3", 4=>"4"}       "4"
utest match 2+2{2=>"2"  3=>"3"  4=>"4"}       "4"

//test boolean match
utest match true {true=>1, false=>2}          1
utest match false {true=>1, false=>2}         2
utest match false {true=>1 false=>2}          2

//deep match
utest match [[],["abc","k"]]
      {[] => '1' [[],[]] => '2'  [[],["a"++[x]++b,_]] => x}      'b'
utest match [[],["abc","k"]]
      {[] => '1' [[],[]] => '2'  [[],["a"++[x]++b,_]] => b}      "c"

//wildcard
utest match [1,2,3] {[_,a,_] => a}              2
utest match [1,2,3] {[a,_,_] => a}              1
utest match [1,2,3] {[a,_,_,_] => a  _ => 5}    5

utest match "testa" {"test" => 1, _ => 2}           2
utest match ["test"] {["test"]++_ => 1, _ => 2}     1
utest match ["testa"] {["test"]++_ => 1, _ => 3}    3

// Pattern variables first is not part of Miking--
// utest match [1,2,3] {a++[2,3] => a}             [1]
