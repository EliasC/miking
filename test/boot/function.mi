// Miking is licensed under the MIT license.
// Copyright (C) David Broman. See file LICENSE.txt
//
// Test different way of specifying funcions

#lang ragnar

//Test a recursive function where we specify the return type
def fact(n:Int) -> Int {
    if(n <= 1) 1 else n*fact(n-1)
}
utest fact(0)   1
utest fact(1)   1
utest fact(2)   2
utest fact(3)   6
utest fact(6)   720
utest fact(12)  479001600

//Test function with zero arguments
def foo1() = {
    5
}
def foo2() = 8
utest foo1()    5
utest foo2()    8

//Test functions with many arguments with differnt types
def foo3(x:Int,f:Int->Int,str:String){
    f(x)
}
def incr(x:Int) = x + 3
utest foo3(8,incr,"something")          11

//Anonymous function, one parameter. Assume that we can do type infefence.
utest foo3(10,fun(x)x+5,"")       15
utest foo3(10,fun (x)x+5,"")      15
utest foo3(10,fun (x) x+5,"")     15
utest foo3(10,fun x x+5,"")       15
utest foo3(10,fun x {x+5},"")     15
utest foo3(10,fun(x){x+5},"")     15
utest foo3(10,x->x+5,"")          15



//Return a function with several arguments. Several scopes
def foo4(f:String->String,x:String) -> (String,String) -> String {
    def internal(s1:String,s2:String) -> String {
        f(x) ++ s1 ++ s2 
    }
    internal
}
def foo5(s:String) = s ++ "|"
def foo6 = foo4(foo5,"first")
//utest foo4(foo5,"first")("second","last")       "" // Not possible now
utest foo6("second","last")       "first|secondlast" 


//Definitions without commas
def foo7(x:Int y:Int) = x + y
utest foo7(3,8)                   11
utest foo7(3 8)                   11








