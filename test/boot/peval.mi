
// Miking is licensed under the MIT license.
// Copyright (C) David Broman. See file LICENSE.txt
//
// File mcore.mi tests all basic MCore language constructs

language MCore

// Literals and normal expressions.
utest 1  (peval 1)
utest 14  (peval (add 10 (sub 7 3)))

// Partial evaluation, but without giving any optimized effect
let foo = lam x:Int. lam y:Int. (add x y)
utest 13  ((peval foo) 10 3)
utest 5  ((peval (foo 2)) 3)

// Partial evaluation one lambda. Performs partial eval under lambda
let foo = lam x:Int. lam y:Int. lam z:Int. (mul (add x y) z)
utest 26  ((peval (foo 10 3)) 2)

// Partial evaluation of two dynamic input variables
let foo = lam x:Int. lam y:Int. lam z:Int. lam k:Int. (mul (mul (add x y) z) k)
utest 40  ((peval (foo 2 3)) 2 4)


//TODO:
// - add partial evaluation of if-statements
// - optimize mul with 0 and 1 and add with 0
// - add affine lambdas
