/* 
  Modelyze II is licensed under the MIT license.
  Copyright (C) David Broman. See file LICENSE.txt

  Test differnt ways of using the match construct
*/




def foo1(str:String) = match str {
    [x]++x2 => x
    [] => 'y'
}

/*
utest foo1("foo")       'f'
utest foo1("k")         'k'
utest foo1("")          'y'
*/

def map(f:a->b, lst:[a]) -> [b] = match lst {
    [x]++xs => [f] ++ map(f,xs)
    [] => []
}

/*
utest match "tests" {['t',a,'s']++b => a else _ => '.'}           'e'
utest match "tests" {['t',a,'s']++b => b   _ => '.'}              "ts"
utest match "tests" {['t',a,'k']++b => b   _ => '.'}              '.'

utest match "tests" {"t"++a++"s"++b => a   _ => '.'}              "e"
*/


// Pretty print of match